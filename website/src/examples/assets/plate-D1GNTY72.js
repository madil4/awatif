import{v as e,f as I,a as S}from"./mesh-Cs8aYJBQ.js";import{p as w}from"./parameters-Bpf96Z0A.js";import{d as M}from"./deform-Cwdrr_ew.js";const p={xPosition:{value:e.state(15),min:5,max:20},load:{value:e.state(-50),min:-100,max:100,step:1}},u=e.state([]),r=e.state([]),d=e.state({}),v=e.state({}),i=e.state({});e.derive(()=>{const{nodes:s,elements:n,boundaryIndices:c}=I({points:e.state([[0,0,0],[15,0,0],[p.xPosition.value.val,10,0],[0,5,0]]),polygon:e.state([0,1,2,3]),maxMeshSize:2}),l={supports:new Map(c.val.map(a=>[a,[!0,!0,!0,!0,!0,!0]])),loads:new Map(s.val.map((a,t)=>[t,[0,0,p.load.value.val,0,0,0]]))},o=n.val,m={elasticities:new Map(o.map((a,t)=>[t,100])),thicknesses:new Map(o.map((a,t)=>[t,1])),poissonsRatios:new Map(o.map((a,t)=>[t,.3]))},f=M(s.val,n.val,l,m);u.val=s.val,r.val=n.val,d.val=l,v.val=m,i.val=f});document.body.append(w(p),S({structure:{nodes:u,elements:r,nodeInputs:d,elementInputs:v,deformOutputs:i},settingsObj:{deformedShape:!0,loads:!1}}));
